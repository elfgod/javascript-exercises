const chai = require("chai")
const assert = chai.assert
chai.config.truncateThreshold = 0

describe('M1-pulse-check',  () => {
  describe('product(x,y)', () => {
    it('should multiply two numbers correctly',  () => {
      assert.equal(product(2,2), 4);
    });
  });
  
  describe('isEven(num)', ()=>{
    it('should return true if argument is an even number', () => {
      assert.equal(isEven(18), true)
    })
    it('should return false if the argument is an odd number.', () => {
      assert.equal(isEven(11),false);
    });
  })
  
  describe('maxOfTwoNumbers(a, b)', () => {
    it('should return a higher number from 2 provided numbers', () => {
      assert.equal(maxOfTwoNumbers(10, 99), 99);
    });

    it('should return a number closer to 0 when both argument numbers are lower than 0', () => {
      assert.equal(maxOfTwoNumbers(-4, -27),-4);
    });
  });
  
  describe('maxOfThreeNumbers(a, b, c)', () => {
    it('should return the first argument when the first argument is the highest number', () => {
      assert.equal(maxOfThreeNumbers(99, 50, 3), 99);
    });

    it('should return the second argument when the second argument is the highest number', () => {
      assert.equal(maxOfThreeNumbers(10, 99, 3), 99);
    });

    it('should return the third argument when the third argument is the highest number', () => {
      assert.equal(maxOfThreeNumbers(4, 5, 99), 99);
    });

    it('should return the value closest to 0 when all arguments are numbers that are less than 0.', () => {
     assert.equal(maxOfThreeNumbers(-4, -5, -19), -4);
    });
  });
  
  describe('sumArray(numbers)', () => {
    it('should return the sum of all numbers in the array.', () => {
      assert.equal(sumArray([1, 2, 3, 4]),10);
    });

    it('should return 0 when first argument is an empty array.', () => {
      assert.equal(sumArray([]), 0);
    });
  });

  describe('maxOfArray(numbers)', () => {
    it('should return the highest number from the given array of numbers.', () => {
      assert.equal(maxOfArray([1, 200, 100, 44]), 200);
    });
  });
  
  describe('longestString(stringsArr)', () => {
    it('should return the longest string from the given array of strings.', () => {
      assert.equal(longestString(['abc', 'bca', 'ab', 'b']), 'abc');
    });
  });

  describe('doesWordExist(wordsArr, word)', () => {
    it('should return true if the given array contains the expected string', () => {
      assert.equal(doesWordExist(['foo', 'bar', 'baz'], 'foo'), true);
    });

    it("should return false if the given array doesn't contain the expected string", () => {
      assert.equal(doesWordExist(['foo', 'bar', 'baz'], 'fizz'), false);
    });
  });

  describe('findUnique(wordsArr)', () => {
    it('should return the unique string that occurs first in the array', () => {
      const assertion = findUnique([
        'foo',
        'bar',
        'foo',
        'baz',
        'bar',
        'fizz',
        'foo',
      ]);

      assert.equal(assertion, 'baz');
    });

    it('should return false if the first argument is an empty array', () => {
      const assertion = findUnique([]);
      assert.equal(assertion, false);
    });
  });
  
  describe('getFullName( { firstName: String, lastName: String } )', () => {
    it('should return the string representing the concatenation of the firstName and lastName', () => {
      assert.equal(getFullName({ firstName: 'Tony', lastName: 'Stark' }), 'Tony Stark');
    });
  });

  describe('maxTwoDimArray(matrix)', () => {
    var matrix = [[9, 1, 1331, 42], [3133, 13, 1], [931, 3131, 0]];

    it('should return the highest number from a two dimensional array', () => {
      assert.equal(maxTwoDimArray(matrix), 3133);
    });
  });
  
});
